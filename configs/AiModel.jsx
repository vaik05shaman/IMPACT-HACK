const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
 
  export  const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate A Course Tutorial on Following Detail With field as Course Name, Description, Along with Chapter Name, about, Duration: Category: 'Programming', Topic: Python, Level:Basic, Duration: 1 hours, NoOf Chapters:5, in JSON format \n24 \n0"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"Course Name\": \"Following Detail\",\n  \"Description\": \"This course is designed to help beginners understand and appreciate the importance of detail in programming, specifically within the Python language. We will cover key concepts and build a strong foundation for future development.\",\n  \"Category\": \"Programming\",\n  \"Topic\": \"Python\",\n  \"Level\": \"Basic\",\n  \"Duration\": \"1 hours\",\n  \"NoOf Chapters\": 5,\n  \"Chapters\": [\n    {\n      \"Chapter Name\": \"Introduction to Detail-Oriented Programming\",\n      \"About\": \"This chapter introduces the concept of detail-oriented programming and why it is crucial for writing robust and maintainable code. We will explore common pitfalls that arise from neglecting detail and learn techniques to avoid them.\",\n      \"Duration\": \"10 minutes\"\n    },\n    {\n      \"Chapter Name\": \"Python Syntax and Data Types: The Devil is in the Details\",\n      \"About\": \"We will delve into the specifics of Python syntax and data types, highlighting common mistakes and best practices.  Understanding the nuances of indentation, variable naming, and data type behavior is essential for accurate coding.\",\n      \"Duration\": \"15 minutes\"\n    },\n    {\n      \"Chapter Name\": \"Functions and Error Handling:  Paying Attention to the Small Things\",\n      \"About\": \"This chapter focuses on writing well-defined functions and implementing proper error handling. We will learn how to anticipate potential issues and write code that gracefully handles unexpected inputs or errors. We'll cover try-except blocks and best practices for documentation.\",\n      \"Duration\": \"15 minutes\"\n    },\n    {\n      \"Chapter Name\": \"Code Style and Documentation: Communicating Clearly\",\n      \"About\": \"Learn about the importance of consistent code style and thorough documentation. We'll explore PEP 8 guidelines and best practices for writing clear and understandable code, including using comments effectively.  We'll discuss tools like linters and auto-formatters.\",\n      \"Duration\": \"10 minutes\"\n    },\n    {\n      \"Chapter Name\": \"Practical Exercise: Building a Detail-Oriented Application\",\n      \"About\": \"We will apply the concepts learned throughout the course by building a small Python application. This hands-on experience will reinforce the importance of attention to detail and provide valuable practical skills.\",\n      \"Duration\": \"20 minutes\"\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
 
    export const generateChapterContent_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Explain the concept in Detail on Topic: Python Basic, Chapter:Variables and Data Types, in JSON Format with list of array with field as title, explanation on give chapter in detail , Code Example(Code field in <precode> format) if applicable\n\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"Python Basics\": {\n    \"Chapter\": \"Variables and Data Types\",\n    \"Sections\": [\n      {\n        \"title\": \"Variables\",\n        \"explanation\": \"Variables are named storage locations in memory that hold values.  They act as containers for data that can be used and manipulated throughout your program.  In Python, you don't need to explicitly declare the data type of a variable; Python infers it based on the value assigned to the variable. Variable names are case-sensitive (e.g., 'myVariable' is different from 'myvariable').  It is recommended to use descriptive and meaningful names.  Variable names must start with a letter or an underscore, and can contain letters, numbers, and underscores.\",\n        \"Code Example\": [\n          {\n            \"description\": \"Assigning an integer value to a variable\",\n            \"code\": \"<pre>age = 25\\nprint(age)</pre>\"\n          },\n          {\n            \"description\": \"Assigning a string value to a variable\",\n            \"code\": \"<pre>name = \\\"Alice\\\"\\nprint(name)</pre>\"\n          },\n          {\n            \"description\": \"Assigning a floating-point value to a variable\",\n            \"code\": \"<pre>pi = 3.14159\\nprint(pi)</pre>\"\n          },\n          {\n            \"description\": \"Multiple assignments\",\n            \"code\": \"<pre>x, y, z = 1, 2, 3\\nprint(x, y, z) # Output: 1 2 3</pre>\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Data Types\",\n        \"explanation\": \"Data types represent the kind of values that a variable can hold. Python has several built-in data types:\\n\\n*   **Integers (int):** Whole numbers, positive or negative, without any decimal points (e.g., 10, -5, 0).\\n*   **Floating-point numbers (float):** Numbers with a decimal point (e.g., 3.14, -2.5, 0.0).\\n*   **Strings (str):** Sequences of characters, enclosed in single quotes (') or double quotes (\\\") (e.g., \\\"Hello\\\", 'Python').\\n*   **Booleans (bool):** Represents truth values, either `True` or `False`.\\n*   **Lists (list):** Ordered, mutable (changeable) collections of items. Items in a list can be of different data types (e.g., `[1, \"hello\", 3.14]`).\\n*   **Tuples (tuple):** Ordered, immutable (unchangeable) collections of items.  Similar to lists, but defined using parentheses (e.g., `(1, \"hello\", 3.14)`).\\n*   **Dictionaries (dict):** Unordered collections of key-value pairs. Keys must be unique and immutable (e.g., strings, numbers, tuples), while values can be of any data type (e.g., `{\\\"name\\\": \\\"Bob\\\", \\\"age\\\": 30}`).\\n*   **Sets (set):** Unordered collections of unique items (e.g., `{1, 2, 3}`).\",\n        \"Code Example\": [\n          {\n            \"description\": \"Integer data type\",\n            \"code\": \"<pre>x = 10\\nprint(type(x))  # Output: <class 'int'></pre>\"\n          },\n          {\n            \"description\": \"Float data type\",\n            \"code\": \"<pre>y = 3.14\\nprint(type(y))  # Output: <class 'float'></pre>\"\n          },\n          {\n            \"description\": \"String data type\",\n            \"code\": \"<pre>name = \\\"Python\\\"\\nprint(type(name)) # Output: <class 'str'></pre>\"\n          },\n          {\n            \"description\": \"Boolean data type\",\n            \"code\": \"<pre>is_valid = True\\nprint(type(is_valid)) # Output: <class 'bool'></pre>\"\n          },\n           {\n            \"description\": \"List data type\",\n            \"code\": \"<pre>my_list = [1, 2, 'a']\\nprint(type(my_list)) # Output: <class 'list'></pre>\"\n          },\n           {\n            \"description\": \"Tuple data type\",\n            \"code\": \"<pre>my_tuple = (1, 2, 'a')\\nprint(type(my_tuple)) # Output: <class 'tuple'></pre>\"\n          },\n           {\n            \"description\": \"Dictionary data type\",\n            \"code\": \"<pre>my_dict = {'name': 'Alice', 'age': 30}\\nprint(type(my_dict)) # Output: <class 'dict'></pre>\"\n          },\n           {\n            \"description\": \"Set data type\",\n            \"code\": \"<pre>my_set = {1, 2, 3}\\nprint(type(my_set)) # Output: <class 'set'></pre>\"\n          }\n\n        ]\n      },\n      {\n        \"title\": \"Type Conversion (Casting)\",\n        \"explanation\": \"Type conversion, also known as type casting, allows you to change the data type of a variable. Python provides built-in functions for this purpose:\\n\\n*   `int()`: Converts a value to an integer.\\n*   `float()`: Converts a value to a floating-point number.\\n*   `str()`: Converts a value to a string.\\n*   `bool()`: Converts a value to a boolean.\\n\\nBe aware that not all conversions are possible, and attempting an invalid conversion will raise a `TypeError`.\",\n        \"Code Example\": [\n          {\n            \"description\": \"Converting a string to an integer\",\n            \"code\": \"<pre>num_str = \\\"10\\\"\\nnum_int = int(num_str)\\nprint(num_int, type(num_int)) # Output: 10 <class 'int'></pre>\"\n          },\n          {\n            \"description\": \"Converting an integer to a float\",\n            \"code\": \"<pre>num_int = 5\\nnum_float = float(num_int)\\nprint(num_float, type(num_float)) # Output: 5.0 <class 'float'></pre>\"\n          },\n          {\n            \"description\": \"Converting a number to a string\",\n            \"code\": \"<pre>num = 123\\nnum_str = str(num)\\nprint(num_str, type(num_str)) # Output: 123 <class 'str'></pre>\"\n          },\n          {\n            \"description\": \"Converting to a boolean (Truthy/Falsy values)\",\n            \"code\": \"<pre>print(bool(1))    # Output: True\\nprint(bool(0))    # Output: False\\nprint(bool(\\\"hello\\\")) # Output: True\\nprint(bool(\\\"\\\"))    # Output: False\\nprint(bool([1,2])) # Output: True\\nprint(bool([]))   # Output: False\\nprint(bool(None))  # Output: False</pre>\"\n          },\n          {\n            \"description\": \"Invalid conversion (string containing non-numeric characters)\",\n            \"code\": \"<pre># This will raise a ValueError\\n# num_str = \\\"abc\\\"\\n# num_int = int(num_str)</pre>\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Operators\",\n        \"explanation\": \"Operators are special symbols in Python that carry out arithmetic or logical computation. Common types of operators include:\\n\\n*   **Arithmetic Operators:** `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), `//` (floor division - integer result), `%` (modulo - remainder), `**` (exponentiation).\\n*   **Comparison Operators:** `==` (equal to), `!=` (not equal to), `>` (greater than), `<` (less than), `>=` (greater than or equal to), `<=` (less than or equal to).\\n*   **Logical Operators:** `and` (logical AND), `or` (logical OR), `not` (logical NOT).\\n*   **Assignment Operators:** `=` (assignment), `+=` (add and assign), `-=` (subtract and assign), `*=` (multiply and assign), `/=` (divide and assign), etc.\\n*   **Membership Operators:** `in` (returns True if a sequence with the specified value is present in the object), `not in` (returns True if a sequence with the specified value is not present in the object).\\n*   **Identity Operators:** `is` (returns True if both variables are the same object), `is not` (returns True if both variables are not the same object).\",\n        \"Code Example\": [\n          {\n            \"description\": \"Arithmetic operators\",\n            \"code\": \"<pre>x = 10\\ny = 3\\nprint(x + y)  # Output: 13\\nprint(x - y)  # Output: 7\\nprint(x * y)  # Output: 30\\nprint(x / y)  # Output: 3.3333333333333335\\nprint(x // y) # Output: 3\\nprint(x % y)  # Output: 1\\nprint(x ** y) # Output: 1000</pre>\"\n          },\n          {\n            \"description\": \"Comparison operators\",\n            \"code\": \"<pre>x = 5\\ny = 10\\nprint(x == y) # Output: False\\nprint(x != y) # Output: True\\nprint(x > y)  # Output: False\\nprint(x < y)  # Output: True\\nprint(x >= 5) # Output: True\\nprint(y <= 10) # Output: True</pre>\"\n          },\n          {\n            \"description\": \"Logical operators\",\n            \"code\": \"<pre>x = True\\ny = False\\nprint(x and y) # Output: False\\nprint(x or y)  # Output: True\\nprint(not x)  # Output: False</pre>\"\n          },\n          {\n            \"description\": \"Assignment operators\",\n            \"code\": \"<pre>x = 5\\nx += 2  # x = x + 2\\nprint(x)  # Output: 7\\nx *= 3  # x = x * 3\\nprint(x) # Output: 21</pre>\"\n          },\n          {\n            \"description\": \"Membership operators\",\n            \"code\": \"<pre>my_list = [1, 2, 3]\\nprint(1 in my_list)  # Output: True\\nprint(4 in my_list)  # Output: False\\nprint(4 not in my_list) # Output: True</pre>\"\n          },\n           {\n            \"description\": \"Identity operators\",\n            \"code\": \"<pre>x = [1, 2, 3]\\ny = [1, 2, 3]\\nz = x\\nprint(x is y)  # Output: False (different objects, same content)\\nprint(x is z)  # Output: True (same object)\\nprint(x == y)  # Output: True (content is the same)</pre>\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```"},
          ],
        },
      ],
    });
  